set.seed(111)
pi0 <- 0.1
n <- 126
true_sd <- sqrt(pi0*(1-pi0)/n)
results <- pop %>%
infer::rep_sample_n(size = 126, reps = 10000) %>%
summarise(p = mean(lowbirthweight),
se = sqrt(phat*(1-phat)/126),
me = 1.96 * se,
lower = p - me,
upper = p + me,
correct_CI = (lower <= pi0 && upper >= pi0),
zscore = (phat-p0)/se,
pval = 2*(1-pnorm(abs(zscore))),
reject_null = pval <= 0.05)
View(pop)
View(results)
View(pop)
View(results)
View(pop)
View(pop)
popsize <- 100000
pop <- data.frame(lowbirthweight = c(rep(0, 0.9*popsize), rep(1, 0.1*popsize)))
View(pop)
View(pop)
library(infer)
set.seed(111)
pi0 <- 0.1
n <- 126
true_sd <- sqrt(pi0*(1-pi0)/n)
results <- pop %>%
infer::rep_sample_n(size = 126, reps = 10000) %>%
summarise(p = mean(lowbirthweight),
se = sqrt(p*(1-p)/126),
me = 1.96 * se,
lower = p - me,
upper = p + me,
correct_CI = (lower <= pi0 && upper >= pi0),
zscore = (p-p0)/se,
pval = 2*(1-pnorm(abs(zscore))),
reject_null = pval <= 0.05)
library(infer)
set.seed(111)
pi0 <- 0.1
n <- 126
true_sd <- sqrt(pi0*(1-pi0)/n)
results <- pop %>%
infer::rep_sample_n(size = 126, reps = 10000) %>%
summarise(p = mean(lowbirthweight),
se = sqrt(p*(1-p)/126),
me = 1.96 * se,
lower = p - me,
upper = p + me,
correct_CI = (lower <= pi0 && upper >= pi0),
zscore = (p-pi0)/se,
pval = 2*(1-pnorm(abs(zscore))),
reject_null = pval <= 0.05)
View(results)
View(results)
proportion <- results %>% filter(p)
proportion <- results %>% select(p)
View(proportion)
order(proportion)
sort(proportion)
sort(proportion)
proportion <- results %>% select(p)
sort(proportion)
sort(proportion)
sort(proportion$p)
sort(proportion$p, decreasing = F)
sort(proportion$p, decreasing = F)
sort(proportion$p, decreasing = FALSE)
sort(proportion$p, decreasing = TRUE)
covered <- results %>% select(correct_CI)
count(covered)
covered <- results %>% select(correct_CI) %>% filter(correct_CI=="TRUE")
View(covered)
count(covered)
type1 <- results %>% select(correct_CI, reject_null)
View(type1)
type1 <- results %>%
select(correct_CI, reject_null) %>%
filter(correct_CI=="TRUE", reject_null=="TRUE")
# Code if necessary
View(type1)
type1 <- results %>%
filter(reject_null=="TRUE")
# Code if necessary
count(type1)
knitr::opts_chunk$set(echo = TRUE)
P_pool=((180+30)/(1520+230))
P_pool=((180+30)/(1520+230))
P_1= 30/230
p_2= 180/1520
P_pool=((180+30)/(1520+230))
SE= sqrt((P_1(1-P_1))/230+(p_2(1-p_2))/1520)
P_1= 30/230
p_2= 180/1520
P_pool=((180+30)/(1520+230))
SE= sqrt((P_1(1-P_1))/230+(p_2(1-p_2))/1520)
P_1= 30/230
p_2= 180/1520
P_pool=((180+30)/(1520+230))
SE= sqrt((P_1*(1-P_1))/230+(p_2*(1-p_2))/1520)
P_1= 30/230
p_2= 180/1520
P_pool=((180+30)/(1520+230))
SE= sqrt((P_1*(1-P_1))/230+(p_2*(1-p_2))/1520)
Z=(((P_1-p_2)-0)/SE)
P_1= 30/230
p_2= 180/1520
P_pool=((180+30)/(1520+230))
SE= sqrt((P_pool*(1-P_pool))/230+(P_pool*(1-P_pool))/1520)
Z=(((P_1-p_2)-0)/SE)
SE_wtf=sqrt((0.12*(1-0.12))/1520+((0.12(1-0.12))/230))
SE_wtf=sqrt((0.12*0.88)/1520+((0.12*0.88)/230))
Z_wtf=(0.1184-0.1304-0)/0.0230
P_1= 30/230
p_2= 180/1520
P_pool=((180+30)/(1520+230))
SE= sqrt((P_pool*(1-P_pool))/230+(P_pool*(1-P_pool))/1520)
SE_wtf=sqrt((0.12*0.88)/1520+((0.12*0.88)/230))
Z_wtf=(0.1184-0.1304-0)/0.0230
Z=(((p_2-p_1)-0)/SE)
P_1= 30/230
p_2= 180/1520
P_pool=((180+30)/(1520+230))
SE= sqrt((P_pool*(1-P_pool))/230+(P_pool*(1-P_pool))/1520)
SE_wtf=sqrt((0.12*0.88)/1520+((0.12*0.88)/230))
Z_wtf=(0.1184-0.1304-0)/0.0230
Z=(((p_2-P_1)-0)/SE)
Z=(((p_2-P_1)-0)/0.0230)
install.packages(c("backports", "boot", "broom", "callr", "class", "dbplyr", "dplyr", "ellipsis", "fs", "ggplot2", "glue", "haven", "htmltools", "httr", "infer", "isoband", "jsonlite", "KernSmooth", "knitr", "lattice", "lubridate", "MASS", "matrixStats", "mgcv", "modelr", "nlme", "nnet", "openintro", "pillar", "pkgbuild", "pkgload", "processx", "ps", "purrr", "Rcpp", "readr", "remotes", "reshape2", "rlang", "rmarkdown", "rvest", "scales", "spatial", "stringi", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "withr", "xfun", "xml2"))
install.packages("styler")
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
# Load the *state level* data into a variable. `states`
states <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv",
stringsAsFactors = FALSE)
# Load the *county level* data into a variable. `counties`
# (this is a large dataset, which may take ~30 seconds to load)
counties <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
# Load the *state level* data into a variable. `states`
states <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv",
stringsAsFactors = FALSE)
# Load the *county level* data into a variable. `counties`
# (this is a large dataset, which may take ~30 seconds to load)
counties <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
# Load the *state level* data into a variable. `states`
states <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv",
stringsAsFactors = FALSE)
# Load the *county level* data into a variable. `counties`
# (this is a large dataset, which may take ~30 seconds to load)
counties <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv",
stringsAsFactors = FALSE)
install.packages(hexbin)
install(hexbin)
install.packages("hexbin")
library(hexbin)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
colnames(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(diamonds,1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
slice_sample(1000)
diamonds_sample <- diamonds %>%
ssample_n(1000)
diamonds_sample <- diamonds %>%
sample_n(1000)
diamonds_sample <- diamonds %>%
slice_sample(n = 1000)
dim(diamonds_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample) +
geom_point(aes(x = carat, y = price))
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, col(clarity)))
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, col = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, col = price),
alpha = .1)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price),
col = "blue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price),
col = "blue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
install.packages("RColorBrewer")
library(RColorBrewer)
library(lintr)
library(styler)
lint("Chart_race_hosp.R")
setwd("~/Desktop/INFO_201/Group_project/Exploratory-Analysis/script")
lint("Chart_race_hosp.R")
lint("Chart_race_hosp.R")
style_file("Chart_race_hosp.R")
## Chart 1
```{r include = FALSE}
source("script/Chart_race_hosp.R")
```
Due to the sudden mass out broke of the pandemic, hospital resources became
preciouses and not everyone had the opportunity to be treated by hospitals. We
want see whether there is a difference in hospital treatment rate among people
from different race and ethnicity groups by looking into the general hospital
treatment rate of COVID-19 in the U.S. and comapre it with the hospital
treatment rates for each specific race and ethnicity group.
The chart showing the hosipital treatment rate among different race and
ethnicity is displayed below.
(People who do not have a hospital reocord and people who have a unknown race
and ethnicity record are filtered out from the data.)
```{r}
race_hosp_chart
```
According to the chart, we can see that the over all hospital treatment among
all race and ethnicity is `r format(hosp_y * 100，digits = 1) `%, which is
rather low. This may be a sign indicating how compacked hospitals are and the
inability of hospitals for taking in all patients in need. Among all race and
ethnicity groups, black and non-hispanic people have a hospotal treatment rate
of `r format(hosp_y_max * 100, digits = 1 )`%, which is the highest among all
race and ethnicity groups. The race and ethnicity that have the lowest hospital
treatment rate is Native Hawaiian/Other Pacific Islander and non-hispanic
people, `r format(hosp_y_min * 100, digits = 1 )`%. Possible explaination of
these differences may be variation in ability to pay for hospital treatment,
severity of illness, and the willingness to seek hospital treatment among these
groups.
```{r include = FALSE}
setwd("~/Desktop/INFO_201/Group_project/Exploratory-Analysis")
source("script/Chart_race_hosp.R")
source("script/Chart_race_hosp.R")
source("script/chart_2.R")
plot_line
getwd()
data_path <- file.path(
getwd(),
"script",
"aggregate_table.R"
)
source(data_path)
getwd()
data_path <- file.path(
getwd(),
"script",
"aggregate_table.R"
)
source(data_path)
data_path2 <- file.path(
getwd(),
"script",
"aggregate_table.R"
)
source(data_path2)
data_path2 <- file.path(
getwd(),
"script",
"aggregate_table.R"
)
source(data_path2)
data_path2 <- file.path(
getwd(),
"script",
"aggregate_table.R"
)
source(data_path2)
source('~/Exploratory-Analysis/script/Aggregate_Table.R', echo=TRUE)
source('~/Exploratory-Analysis/script/Aggregate_Table.R', echo=TRUE)
source('~/Exploratory-Analysis/script/aggregate_table.R', echo=TRUE)
source('~/Exploratory-Analysis/script/aggregate_table.R', echo=TRUE)
source('~/Exploratory-Analysis/script/aggregate_table.R', echo=TRUE)
source('~/Exploratory-Analysis/script/aggregate_table.R', echo=TRUE)
source('~/Exploratory-Analysis/script/aggregate_table.R', echo=TRUE)
source('~/Exploratory-Analysis/script/aggregate_table.R', echo=TRUE)
source('~/Exploratory-Analysis/script/aggregate_table.R', echo=TRUE)
getwd()
source('~/Exploratory-Analysis/script/aggregate_table.R', echo=TRUE)
source("script/aggregate_table.R")
kable(relevant_dataset)
library("knitr")
source("script/aggregate_table.R")
kable(relevant_dataset)
library("knitr")
source("script/aggregate_table.R")
library("knitr")
source("script/aggregate_table.R")
relevant_dataset
